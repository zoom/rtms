name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "dev", "master" ]
  pull_request:
    branches: [ "main", "dev", "master" ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Build and test the JavaScript/Node.js components
  test-js:
    name: Build and Test JavaScript
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Docker Setup Compose
      uses: docker/setup-compose-action@v1.1.0
      
    - name: Build JavaScript components
      run: docker compose up js
      
    - name: Run JavaScript tests
      run: docker compose up test-js
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: js-test-results
        path: |
          logs/
          test-results/
        retention-days: 7

  # Build and test Python components
  # test-py:
  #   name: Build and Test Python
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Docker Setup Compose
  #     uses: docker/setup-compose-action@v1.1.0
      
  #   - name: Build Python components
  #     run: docker compose up py
      
  #   - name: Run Python tests
  #     run: docker compose up test-py
      
  #   - name: Upload test results
  #     uses: actions/upload-artifact@v3
  #     if: always()
  #     with:
  #       name: py-test-results
  #       path: |
  #         logs/
  #         test-results/
  #       retention-days: 7

  # Security and quality checks
  quality-checks:
    name: Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        if [ -f package.json ]; then
          docker run --rm -v $(pwd):/app -w /app node:lts npm audit --audit-level moderate
        fi
      continue-on-error: true
      
    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME\|XXX" src/ --include="*.cpp" --include="*.h" --include="*.ts" --include="*.py"; then
          echo "::warning::Found TODO/FIXME comments in source code"
        fi
      continue-on-error: true

  # Build documentation (depends on successful tests)
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [test-js]
    # Only run on main/master branches and if tests pass
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Docker Setup Compose
      uses: docker/setup-compose-action@v1.1.0
      
    - name: Build all documentation
      run: docker compose run --rm docs-all
      
    - name: Setup docs structure
      run: |
        mkdir -p docs
        cp .github/docs-template/index.html docs/ || echo "No template found"
        
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: ./docs
        retention-days: 30

  # Deploy documentation to GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build-docs]
    # Only deploy from main/master branch
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download documentation artifact
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: ./docs
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # Integration tests (run after individual component tests pass)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-js]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Docker Setup Compose
      uses: docker/setup-compose-action@v1.1.0
      
    - name: Run integration tests
      run: |
        # Run comprehensive integration tests
        docker compose up test-js
        
    - name: Test CLI functionality
      run: |
        # Test the unified CLI
        docker compose run --rm js npm run help
        docker compose run --rm js npm run test
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          logs/
          test-results/
        retention-days: 7

  # Summary job for status checks
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [test-js, quality-checks, integration-tests]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.test-js.result }}" == "success" && \
              "${{ needs.test-py.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ All CI checks passed successfully!"
          exit 0
        else
          echo "❌ Some CI checks failed:"
          echo "  JavaScript tests: ${{ needs.test-js.result }}"
          echo "  Python tests: ${{ needs.test-py.result }}"
          echo "  Quality checks: ${{ needs.quality-checks.result }}"
          echo "  Integration tests: ${{ needs.integration-tests.result }}"
          exit 1
        fi